#!/bin/bash

function license()
{
	cat <<-EOL
	##############################################################################
	#                                                                            #
	#   pca - An OpenSSL based "perfect" CA setup and management tool            #
	#   Copyright (C) 2018 Oliver Welter <oliver@welter.rocks>                   #
	#                                                                            #
	#   This program is free software: you can redistribute it and/or modify     #
	#   it under the terms of the GNU General Public License as published by     #
	#   the Free Software Foundation, either version 3 of the License, or        #
	#   (at your option) any later version.                                      #
	#                                                                            #
	#   This program is distributed in the hope that it will be useful,          #
	#   but WITHOUT ANY WARRANTY; without even the implied warranty of           #
	#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
	#   GNU General Public License for more details.                             #
	#                                                                            #
	#   You should have received a copy of the GNU General Public License        #
	#   along with this program.  If not, see <https://www.gnu.org/licenses/>.   #
	#                                                                            #
	##############################################################################
	#                                                                            #
	#   Usage: pca --help                                                        #
	#                                                                            #
	##############################################################################
	EOL
}

##########################
# BASIC CONFIGRATION

PCA_BASE_PATH="/etc/pki"
PCA_BASE_NAME="Perfect-CA"
PCA_BASE_OCSP_URL="http://ocsp.verbotene.zone"
PCA_BASE_PKI_URL="http://pki.verbotene.zone"
PCA_BASE_TRUSTLIST_URL="https://pki.verbotene.zone/trustList.etl"

PCA_DN_COUNTRYNAME="DE"
PCA_DN_STATEORPROVINCENAME="Hessen"
PCA_DN_LOCALITYNAME="Musterstadt"
PCA_DN_STREETADDRESS="Musterstrasse 123"
PCA_DN_POSTALCODE="12345"
PCA_DN_OWNER="Oliver Welter"
PCA_DN_ORGANIZATIONNAME="Musterfirma"
PCA_DN_BUSINESSCATEGORY="private"

PCA_ROOTCA_BITS="2048"
PCA_ROOTCA_MD="sha256"
PCA_ROOTCA_VALID_DAYS="7665"
PCA_ROOTCA_CRL_DAYS="365"
PCA_ROOTCA_ORG_UNIT_NAME="$PCA_BASE_NAME Root Certificate Authority"

PCA_MASTERCA_BITS="2048"
PCA_MASTERCA_MD="sha256"
PCA_MASTERCA_VALID_DAYS="3650"
PCA_MASTERCA_CRL_DAYS="180"
PCA_MASTERCA_ORG_UNIT_NAME="$PCA_BASE_NAME Master Certificate Authority"

PCA_COMPONENTCA_BITS="2048"
PCA_COMPONENTCA_MD="sha256"
PCA_COMPONENTCA_VALID_DAYS="3650"
PCA_COMPONENTCA_CRL_DAYS="180"
PCA_COMPONENTCA_ORG_UNIT_NAME="$PCA_BASE_NAME Component Certificate Authority"

PCA_NETWORKCA_BITS="2048"
PCA_NETWORKCA_MD="sha256"
PCA_NETWORKCA_VALID_DAYS="3650"
PCA_NETWORKCA_CRL_DAYS="180"
PCA_NETWORKCA_ORG_UNIT_NAME="$PCA_BASE_NAME Network Certificate Authority"

PCA_IDENTITYCA_BITS="2048"
PCA_IDENTITYCA_MD="sha256"
PCA_IDENTITYCA_VALID_DAYS="3650"
PCA_IDENTITYCA_CRL_DAYS="180"
PCA_IDENTITYCA_ORG_UNIT_NAME="$PCA_BASE_NAME Identity Certificate Authority"

PCA_OCSPSIGN_BITS="2048"
PCA_OCSPSIGN_MD="sha1"

PCA_TIMESTAMP_BITS="2048"
PCA_TIMESTAMP_MD="sha1"

PCA_ENCRYPTION_BITS="4096"
PCA_ENCRYPTION_MD="sha256"

PCA_SERVER_BITS="4096"
PCA_SERVER_MD="sha256"
PCA_SERVER_SAN_DNS="verbotene.zone"

PCA_CLIENT_BITS="4096"
PCA_CLIENT_MD="sha256"

PCA_IDENTITY_BITS="4096"
PCA_IDENTITY_MD="sha256"

PCA_SSL_CERTS="/etc/ssl/certs"
PCA_OPENSSL="/usr/bin/openssl"

[ -f "$PCA_BASE_PATH/pcarc" ] && . $PCA_BASE_PATH/pcarc
[ -f "~/.pcarc" ] && . ~/.pcarc

[ -x "$PCA_OPENSSL" ] || PCA_OPENSSL=`which openssl 2>/dev/null`
[ -x "$PCA_OPENSSL" ] || error 1 "Missing OpenSSL"

PCA_GITHUB="https://github.com/VerboteneZone/perfect-ca"
PCA_PROGNAME="pca"
PCA_VERSION="1.01.1033"

# END BASIC CONFIGURATION
##########################

##########################
# ERROR FUNCTION

FAILED="[0;1;31;91mFAILED[0m"
OK="[0;1;32;92mOK[0m"

function error()
{
	echo "[0;1;31;91mERROR:[0m [0;1;32;93m$2[0m"
	exit $1
}

# END ERROR FUNCTION
##########################

##########################
# VERSION FUNCTION

function version()
{
	if [ "$1" = "" ];  then
		echo "[0;1;32;93mVersion: $PCA_VERSION[0m"
		exit 253
	elif [ "$1" = "raw" ]; then
		echo $PCA_VERSION
		exit
	else
		NEW_VERSION="$1"
		
		this_major=`echo $PCA_VERSION | cut -d . -f1`
		this_minor=`echo $PCA_VERSION | cut -d . -f2`
		this_revision=`echo $PCA_VERSION | cut -d . -f3`

		that_major=`echo $NEW_VERSION | cut -d . -f1`
		that_minor=`echo $NEW_VERSION | cut -d . -f2`
		that_revision=`echo $NEW_VERSION | cut -d . -f3`
		
		gt_major=$(($that_major > $this_major))
		gt_minor=$(($that_minor > $this_minor))
		gt_revision=$(($that_revision > $this_revision))

		eq_major=$(($that_major == $this_major))
		eq_minor=$(($that_minor == $this_minor))
		eq_revision=$(($that_revision == $this_revision))
		
		if [ "$eq_major" = "1" ]; then
			if [ "$eq_minor" = "1" ]; then
				if [ "$eq_revision" = "1" ]; then
					echo "[0;1;32;92mVersion is equal to this build.[0m"
					exit
				elif [ "$gt_revision" = "1" ]; then
					echo "[0;1;32;93mRevision version greater than this build.[0m"
					exit 6
				else
					echo "[0;1;32;91mRevision version smaller than this build.[0m"
					exit 5
				fi
			elif [ "$gt_minor" = "1" ]; then
				echo "[0;1;32;93mMinor version greater than this build.[0m"
				exit 4
			else
				echo "[0;1;32;91mMinor version smaller than this build.[0m"
				exit 3	
			fi
		elif [ "$gt_major" = "1" ]; then
			echo "[0;1;32;93mMajor version greater than this build.[0m"
			exit 2
		else
			echo "[0;1;32;91mMajor version smaller than this build.[0m"
			exit 1		
		fi
	fi
}

# END VERSION FUNCTION
##########################

##########################
# CONFIGURATION WRITE

function config_header()
{
	ident=""
	date=`date "+%Y-%m-%d %H:%M:%S"`
	
	case $1 in
		root-ca)
			ident="$PCA_BASE_NAME Root CA configuration"	
		;;
		*)
			ident="$1"
		;;
	esac
	
	cat <<-EOF
	#########################################################
	#                                                       #
	# This file has been generated at by                    #
	#  ____            __           _         ____    _     #
	# |  _ \ ___ _ __ / _| ___  ___| |_      / ___|  / \    #
	# | |_) / _ \ '__| |_ / _ \/ __| __|____| |     / _ \   #
	# |  __/  __/ |  |  _|  __/ (__| ||_____| |___ / ___ \  #
	# |_|   \___|_|  |_|  \___|\___|\__|     \____/_/   \_\ #
	#                                                       #
	# https://github.com/VerboteneZone/perfect-ca           #
	#                                                       #
	#########################################################
	# $ident
	# Generated at: $date

	EOF
}

function config_ca_section_default()
{
	assurance=""
	deviceass=""
	trustlist=""
	
	case $1 in
		root-ca|master-ca|network-ca)
			assurance="1"
			deviceass="1"
			trustlist="1"
		;;
		component-ca)
			deviceass="1"
			trustlist="1"
		;;
		identity-ca)
			assurance="1"
			trustlist="1"
		;;
		*)
			error 11 "Unkown CA for default section"
		;;
	esac
	
	cat <<-EOF
	[ default ]
	ca                      = $1
	dir                     = $PCA_BASE_PATH
	base_url                = $PCA_BASE_PKI_URL
	aia_url                 = \$base_url/\$ca.cer
	crl_url                 = \$base_url/\$ca.crl
	name_opt                = multiline,-esc_msb,utf8
	openssl_conf            = openssl_init

	[ openssl_init ]
	oid_section             = include_oids
	
	[ include_oids ]
	EOF

	[ "$assurance" = "1" ] && echo "perfectCAAssurance      = $PCA_BASE_NAME Assurance, 1.3.6.1.4.1.0.1.7.8"
	[ "$deviceass" = "1" ] && echo "perfectCADevice         = $PCA_BASE_NAME Device Assurance, 1.3.6.1.4.1.0.1.7.9"
	[ "$trustlist" = "1" ] && echo "perfectCATrustList      = $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900"
	
	echo ""
}

function config_ca_section_req()
{
	default_bits=""
	default_md=""
	
	case $1 in
		root-ca)
			default_bits="$PCA_ROOTCA_BITS"
			default_md="$PCA_ROOTCA_MD"
		;;
		master-ca)
			default_bits="$PCA_MASTERCA_BITS"
			default_md="$PCA_MASTERCA_MD"
		;;
		component-ca)
			default_bits="$PCA_COMPONENTCA_BITS"
			default_md="$PCA_COMPONENTCA_MD"
		;;
		network-ca)
			default_bits="$PCA_NETWORKCA_BITS"
			default_md="$PCA_NETWORKCA_MD"
		;;
		identity-ca)
			default_bits="$PCA_IDENTITYCA_BITS"
			default_md="$PCA_IDENTITYCA_MD"
		;;
		*)
			error 11 "Unkown CA for section req"
		;;
	esac
	
	cat <<-EOF
	[ req ]
	default_bits            = $default_bits
	encrypt_key             = yes
	default_md              = $default_md
	utf8                    = yes
	string_mask             = utf8only
	prompt                  = no
	distinguished_name      = ca_dn
	req_extensions          = ca_reqext

	EOF
}

function config_ca_section_dn()
{
	organizational_unit_name=""
	common_name=""
	
	case $1 in
		root-ca)
			organizational_unit_name="$PCA_ROOTCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Root CA"
		;;
		master-ca)
			organizational_unit_name="$PCA_MASTERCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Master CA"
		;;
		component-ca)
			organizational_unit_name="$PCA_COMPONENTCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Component CA"
		;;
		network-ca)
			organizational_unit_name="$PCA_NETWORKCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Network CA"
		;;
		identity-ca)
			organizational_unit_name="$PCA_IDENTITYCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Identity CA"
		;;
		*)
			error 11 "Unkown CA for section dn"
		;;
	esac
	
	cat <<-EOF
	[ ca_dn ]
	countryName             = "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     = "$PCA_DN_STATEORPROVINCENAME"
	localityName            = "$PCA_DN_LOCALITYNAME"
	streetAddress           = "$PCA_DN_STREETADDRESS"
	postalCode              = "$PCA_DN_POSTALCODE"
	owner			= "$PCA_DN_OWNER"
	organizationName        = "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  = "$organizational_unit_name"
	commonName              = "$common_name"

	EOF
}

function config_ca_section_reqext()
{
	key_usage=""
	basic_constraints=""
	subject_key_identifier=""
	
	case $1 in
		root-ca|master-ca|network-ca)
			key_usage="critical,keyCertSign,cRLSign"
			basic_constraints="critical,CA:true"
			subject_key_identifier="hash"
		;;
		component-ca|identity-ca)
			key_usage="critical,keyCertSign,cRLSign"
			basic_constraints="critical,CA:true,pathlen:0"
			subject_key_identifier="hash"
		;;
		*)
			error 11 "Unkown CA for section reqext"
		;;
	esac
	
	cat <<-EOF
	[ ca_reqext ]
	keyUsage                = $key_usage
	basicConstraints        = $basic_constraints
	subjectKeyIdentifier    = $subject_key_identifier

	EOF
}

function config_ca_section_crl_info()
{
	case $1 in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
		;;
		*)
			error 11 "Unkown CA for section crl info"
		;;
	esac
	
	cat <<-EOF
	[ crl_ext ]
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	
	[ issuer_info ]
	caIssuers;URI.0         = \$aia_url
	
	[ crl_info ]
	URI.0                   = \$crl_url

	EOF
}

function config_ca_section_policies()
{
	mt_country_name="match"
	mt_state_or_province_name="optional"
	mt_locality_name="optional"
	mt_street_address="optional"
	mt_postal_code="optional"
	mt_owner="match"
	mt_organization_name="optional"
	mt_organizational_unit_name="optional"
	mt_common_name="supplied"
	
	any_country_name="optional"
	any_state_or_province_name="optional"
	any_locality_name="optional"
	any_street_address="optional"
	any_postal_code="optional"
	any_owner="optional"
	any_organization_name="optional"
	any_organizational_unit_name="optional"
	any_common_name="optional"
	any_email_address="optional"
	
	case $1 in
		root-ca|master-ca)
			mt_state_or_province_name="match"
			mt_locality_name="match"
			mt_street_address="match"
			mt_postal_code="match"
			mt_organization_name="match"
		;;
		network-ca|component-ca)
			mt_organization_name="match"
		;;
		identity-ca)
		;;
		*)
			error 11 "Unkown CA for section crl info"
		;;
	esac
	
	cat <<-EOF
	[ match_pol ]
	countryName             = $mt_country_name
	stateOrProvinceName     = $mt_state_or_province_name
	localityName            = $mt_locality_name
	streetAddress		= $mt_street_address
	postalCode		= $mt_postal_code
	owner			= $mt_owner
	organizationName        = $mt_organization_name
	organizationalUnitName  = $mt_organizational_unit_name
	commonName              = $mt_common_name
	
	[ any_pol ]
	domainComponent         = $any_domain_component
	countryName             = $any_country_name
	stateOrProvinceName     = $any_state_or_province_name
	localityName            = $any_locality_name
	streetAddress		= $any_street_address
	postalCode		= $any_postal_code
	owner			= $any_owner
	organizationName        = $any_organization_name
	organizationalUnitName  = $any_organizational_unit_name
	commonName              = $any_common_name
	emailAddress            = $any_email_address
	
	EOF
}

function config_ca_section_operational()
{
	default_ca=""
	default_md=""
	default_days=""
	default_crl_days=""
	x509_extensions=""
	
	case $1 in
		root-ca)
			default_ca="root_ca"
			default_md="$PCA_ROOTCA_MD"
			default_days="$PCA_ROOTCA_VALID_DAYS"
			default_crl_days="$PCA_ROOTCA_CRL_DAYS"
			x509_extensions="intermediate_ca_ext"
		;;
		master-ca)
			default_ca="master_ca"
			default_md="$PCA_MASTERCA_MD"
			default_days="$PCA_MASTERCA_VALID_DAYS"
			default_crl_days="$PCA_MASTERCA_CRL_DAYS"
			x509_extensions="intermediate_ca_ext"
		;;
		network-ca)
			default_ca="network_ca"
			default_md="$PCA_NETWORKCA_MD"
			default_days="$PCA_NETWORKCA_VALID_DAYS"
			default_crl_days="$PCA_NETWORKCA_CRL_DAYS"
			x509_extensions="signing_ca_ext"
		;;
		component-ca)
			default_ca="component_ca"
			default_md="$PCA_COMPONENTCA_MD"
			default_days="$PCA_COMPONENTCA_VALID_DAYS"
			default_crl_days="$PCA_COMPONENTCA_CRL_DAYS"
			x509_extensions="server_ext"
		;;
		identity-ca)
			default_ca="identity_ca"
			default_md="$PCA_IDENTITYCA_MD"
			default_days="$PCA_IDENTITYCA_VALID_DAYS"
			default_crl_days="$PCA_IDENTITYCA_CRL_DAYS"
			x509_extensions="identity_ext"
		;;
		*)
			error 11 "Unknown CA for operational section"
		;;
	esac
	
	cat <<-EOF
	[ ca ]
	default_ca              = $default_ca
	
	[ $default_ca ]
	certificate             = \$dir/ca/certs/\$ca.crt
	private_key             = \$dir/ca/\$ca/private/\$ca.key
	new_certs_dir           = \$dir/ca/\$ca/certs
	serial                  = \$dir/ca/\$ca/db/\$ca.crt.srl
	crlnumber               = \$dir/ca/\$ca/db/\$ca.crl.srl
	database                = \$dir/ca/\$ca/db/\$ca.db
	unique_subject          = no
	default_days            = $default_days
	default_md              = $default_md
	policy                  = match_pol
	email_in_dn             = no
	preserve                = no
	name_opt                = \$name_opt
	cert_opt                = ca_default
	copy_extensions         = none
	x509_extensions         = $x509_extensions
	default_crl_days        = $default_crl_days
	crl_extensions          = crl_ext

	EOF
}

function config_ca_section_ext()
{
	rootmaster=""
	network=""
	identity=""
	component=""
	ident=""
	
	case $1 in
		root-ca)
			ident="root_ca"
			rootmaster="1"
		;;
		master-ca)
			ident="master_ca"
			rootmaster="1"
		;;
		network-ca)
			ident="network_ca"
			network="1"
		;;
		identity-ca)
			ident="identity_ca"
			identity="1"
		;;
		component-ca)
			ident="component_ca"
			component="1"
		;;
		*)
			error 11 "Unknown CA for ext section"
		;;
	esac
	
	[ "$rootmaster" = "1" ] && cat <<-EOF
	[ ${ident}_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always

	[ intermediate_ca_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList

	EOF
	
	[ "$network" = "1" ] && cat <<-EOF
	[ intermediate_ca_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList
	
	[ signing_ca_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true,pathlen:0
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList
		
	EOF
	
	[ "$identity" = "1" ] && cat <<-EOF
	[ identity_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = emailProtection,clientAuth,msSmartcardLogin
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCATrustList
	
	[ encryption_ext ]
	keyUsage                = critical,keyEncipherment
	basicConstraints        = CA:false
	extendedKeyUsage        = emailProtection,msEFS
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCATrustList
	
	EOF
	
	[ "$component" = "1" ] && cat <<-EOF
	[ server_ext ]
	keyUsage                = critical,digitalSignature,keyEncipherment
	basicConstraints        = CA:false
	extendedKeyUsage        = serverAuth,clientAuth
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @ocsp_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCADevice,perfectCATrustList
	
	[ client_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = clientAuth
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @ocsp_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCADevice,perfectCATrustList
	
	[ timestamp_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,timeStamping
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCADevice,perfectCATrustList
	
	[ ocspsign_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,OCSPSigning
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	noCheck                 = null
	certificatePolicies     = perfectCADevice,perfectCATrustList

	EOF
}

function config_ca_tmpl_ocspsign()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section     	        = include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900

	[ req ]
	default_bits            	= $PCA_OCSPSIGN_BITS
	encrypt_key             	= no
	default_md              	= $PCA_OCSPSIGN_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= ocspsign_dn
	req_extensions          	= ocspsign_reqext

	[ ocspsign_dn ]
	countryName    		        = "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default 	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_COMPONENTCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64

	[ ocspsign_reqext ]
	keyUsage                	= critical,digitalSignature
	extendedKeyUsage        	= critical,OCSPSigning
	subjectKeyIdentifier    	= hash
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function config_ca_tmpl_identity()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900

	[ req ]
	default_bits            	= $PCA_IDENTITY_BITS
	encrypt_key             	= yes
	default_md              	= $PCA_IDENTITY_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= identity_dn
	req_extensions          	= identity_reqext
	
	[ identity_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	emailAddress            	= "10. Email Address           (eg, name@fqdn)"
	emailAddress_max        	= 40
	businessCategory        				= "11. Business Category       (eg, private)  "
	businessCategory_default				= "$PCA_DN_BUSINESSCATEGORY"
	jurisdictionOfIncorporationLocalityName         	= "12. Inc. Locality Name            (eg, city)"
	jurisdictionOfIncorporationLocalityName_default		= "$PCA_DN_LOCALITYNAME"
	jurisdictionOfIncorporationStateOrProvinceName  	= "13. Inc. State or Prov.           (eg, reg.)"
	jurisdictionOfIncorporationStateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	jurisdictionOfIncorporationCountryName          	= "14. Inc. Country                  (eg, DE)  "
	jurisdictionOfIncorporationCountryName_default		= "$PCA_DN_COUNTRYNAME"
	
	[ identity_reqext ]
	keyUsage                = critical,digitalSignature
	extendedKeyUsage        = emailProtection,clientAuth
	subjectKeyIdentifier    = hash
	subjectAltName          = email:move
	perfectCATrustList      = ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function config_ca_tmpl_timestamp()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900

	[ req ]
	default_bits            	= $PCA_TIMESTAMP_BITS
	encrypt_key             	= no
	default_md              	= $PCA_TIMESTAMP_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= timestamp_dn
	req_extensions          	= timestamp_reqext
	
	[ timestamp_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	businessCategory        				= "10. Business Category       (eg, private)  "
	businessCategory_default				= "$PCA_DN_BUSINESSCATEGORY"
	jurisdictionOfIncorporationLocalityName         	= "11. Inc. Locality Name            (eg, city)"
	jurisdictionOfIncorporationLocalityName_default		= "$PCA_DN_LOCALITYNAME"
	jurisdictionOfIncorporationStateOrProvinceName  	= "12. Inc. State or Prov.           (eg, reg.)"
	jurisdictionOfIncorporationStateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	jurisdictionOfIncorporationCountryName          	= "13. Inc. Country                  (eg, DE)  "
	jurisdictionOfIncorporationCountryName_default		= "$PCA_DN_COUNTRYNAME"
	
	[ timestamp_reqext ]
	keyUsage                	= critical,digitalSignature
	extendedKeyUsage        	= critical,timeStamping
	subjectKeyIdentifier    	= hash
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	
	EOF
}

function config_ca_tmpl_encryption()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900

	[ req ]
	default_bits            	= $PCA_ENCRYPTION_BITS
	encrypt_key             	= yes
	default_md              	= $PCA_ENCRYPTION_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= encryption_dn
	req_extensions          	= encryption_reqext
	
	[ encryption_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	emailAddress            	= "10. Email Address           (eg, name@fqdn)"
	emailAddress_max        	= 40
	businessCategory        				= "11. Business Category       (eg, private)  "
	businessCategory_default				= "$PCA_DN_BUSINESSCATEGORY"
	jurisdictionOfIncorporationLocalityName         	= "12. Inc. Locality Name            (eg, city)"
	jurisdictionOfIncorporationLocalityName_default		= "$PCA_DN_LOCALITYNAME"
	jurisdictionOfIncorporationStateOrProvinceName  	= "13. Inc. State or Prov.           (eg, reg.)"
	jurisdictionOfIncorporationStateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	jurisdictionOfIncorporationCountryName          	= "14. Inc. Country                  (eg, DE)  "
	jurisdictionOfIncorporationCountryName_default		= "$PCA_DN_COUNTRYNAME"
	
	[ encryption_reqext ]
	keyUsage                	= critical,keyEncipherment
	extendedKeyUsage        	= emailProtection
	subjectKeyIdentifier    	= hash
	subjectAltName          	= email:move
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function config_ca_tmpl_server()
{
	cat <<-EOF
	[ default ]
	SAN                     	= DNS:$PCA_SERVER_SAN_DNS
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900

	[ req ]
	default_bits            	= $PCA_SERVER_BITS
	encrypt_key             	= no
	default_md              	= $PCA_SERVER_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= server_dn
	req_extensions          	= server_reqext
	
	[ server_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	businessCategory        				= "10. Business Category       (eg, private)  "
	businessCategory_default				= "$PCA_DN_BUSINESSCATEGORY"
	jurisdictionOfIncorporationLocalityName         	= "11. Inc. Locality Name            (eg, city)"
	jurisdictionOfIncorporationLocalityName_default		= "$PCA_DN_LOCALITYNAME"
	jurisdictionOfIncorporationStateOrProvinceName  	= "12. Inc. State or Prov.           (eg, reg.)"
	jurisdictionOfIncorporationStateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	jurisdictionOfIncorporationCountryName          	= "13. Inc. Country                  (eg, DE)  "
	jurisdictionOfIncorporationCountryName_default		= "$PCA_DN_COUNTRYNAME"
	
	[ server_reqext ]
	keyUsage                	= critical,digitalSignature,keyEncipherment
	extendedKeyUsage        	= serverAuth,clientAuth
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	subjectKeyIdentifier    	= hash
	subjectAltName          	= \$ENV::SAN

	EOF
}

function config_ca_tmpl_client()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, 2.16.840.1.113730.1.900

	[ req ]
	default_bits            	= $PCA_CLIENT_BITS
	encrypt_key             	= no
	default_md              	= $PCA_CLIENT_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= client_dn
	req_extensions          	= client_reqext
	
	[ client_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	businessCategory        				= "10. Business Category       (eg, private)  "
	businessCategory_default				= "$PCA_DN_BUSINESSCATEGORY"
	jurisdictionOfIncorporationLocalityName         	= "11. Inc. Locality Name            (eg, city)"
	jurisdictionOfIncorporationLocalityName_default		= "$PCA_DN_LOCALITYNAME"
	jurisdictionOfIncorporationStateOrProvinceName  	= "12. Inc. State or Prov.           (eg, reg.)"
	jurisdictionOfIncorporationStateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	jurisdictionOfIncorporationCountryName          	= "13. Inc. Country                  (eg, DE)  "
	jurisdictionOfIncorporationCountryName_default		= "$PCA_DN_COUNTRYNAME"
	
	[ client_reqext ]
	keyUsage                	= critical,digitalSignature
	extendedKeyUsage        	= clientAuth
	subjectKeyIdentifier    	= hash
	welterTrustList         	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function configuration_write()
{
	for ca in root-ca master-ca component-ca network-ca identity-ca; do
		config_file="$PCA_BASE_PATH/ca/conf/$ca.conf"
		config_header $ca > $config_file || return 1
		config_ca_section_default $ca >> $config_file 
		config_ca_section_req $ca >> $config_file
		config_ca_section_dn $ca >> $config_file
		config_ca_section_reqext $ca >> $config_file
		config_ca_section_crl_info $ca >> $config_file
		config_ca_section_policies $ca >> $config_file
		config_ca_section_operational $ca >> $config_file
		config_ca_section_ext $ca >> $config_file
		chmod 640 $config_file >/dev/null 2>&1
	done
	
	config_header "OCSP-Signing template" > $PCA_BASE_PATH/ca/conf/ocspsign.conf || return 2
	config_ca_tmpl_ocspsign >> $PCA_BASE_PATH/ca/conf/ocspsign.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/ocspsign.conf >/dev/null 2>&1

	config_header "Identity template" > $PCA_BASE_PATH/ca/conf/identity.conf || return 2
	config_ca_tmpl_identity >> $PCA_BASE_PATH/ca/conf/identity.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/identity.conf >/dev/null 2>&1

	config_header "Timestamp template" > $PCA_BASE_PATH/ca/conf/timestamp.conf || return 2
	config_ca_tmpl_timestamp >> $PCA_BASE_PATH/ca/conf/timestamp.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/timestamp.conf >/dev/null 2>&1

	config_header "Encryption template" > $PCA_BASE_PATH/ca/conf/encryption.conf || return 2
	config_ca_tmpl_encryption >> $PCA_BASE_PATH/ca/conf/encryption.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/encryption.conf >/dev/null 2>&1

	config_header "Server template" > $PCA_BASE_PATH/ca/conf/server.conf || return 2
	config_ca_tmpl_server >> $PCA_BASE_PATH/ca/conf/server.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/server.conf >/dev/null 2>&1

	config_header "Client template" > $PCA_BASE_PATH/ca/conf/client.conf || return 2
	config_ca_tmpl_client >> $PCA_BASE_PATH/ca/conf/client.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/client.conf >/dev/null 2>&1
}

# END CONFIGURATION WRITE
##########################

##########################
# HELP CONTEXT

function help_context()
{
	cat <<-EOF
	##############################################################################
	#                                                                            #
	# Help context:                                                              #
	# =============                                                              #
	#                                                                            #
	# --help                           Show this help context.                   #
	# --license                        Show license information.                 #
	#                                                                            #
	# --setup                          Setup new Certificate Authorities.        #
	# --force                          Force overwrite of existing CA files.     #
	#                                                                            #
	# --update                         Check for updates on GitHub.              #
	# --install                        Install available updates from GitHub.    #
	#                                                                            #
	# --select-ca [CA]                 Select a specified CA from:               #
	#                                  root-ca, master-ca, network-ca,           #
	#                                  component-ca (default) or identity-ca     #
	#                                                                            #
	# --update-crl                     Update CRL of a selected CA.              #
	# --encrypt-private                Encrypt the private key of selected CA.   #
	# --decrypt-private                Decrypt the private key of selected CA.   #
	#                                                                            #
	##############################################################################	
	EOF
}

# END HELP CONTEXT
##########################

##########################
# CLI ARGUMENTS

PCA_OPMODE=""
PCA_USE_CONFIG=""
PCA_FORCE=""
PCA_SELECTED_CA="component-ca"
PCA_FILENAME=""
PCA_DAYS=""
PCA_NAME=""
PCA_CRL_REASON="superseded"
PCA_SUBJECT=""
PCA_NODES=""
PCA_SKIP=""
PCA_CMD=`echo $* | cut -d \  -f2`
PCA_SSL_INSTALL=""
PCA_CMD_VERSION_RAW=`echo $* | grep "version raw" >/dev/null 2>&1 && echo 1`

[ "$PCA_CMD_VERSION_RAW" = "" ] && cat <<EOF

 [0;1;31;91mm[0;1;33;93mmm[0;1;32;92mmm[0m                  [0;1;31;91mm"[0;1;33;93m"[0m                  [0;1;34;94mm[0m             [0;1;35;95mm[0;1;31;91mmm[0m    [0;1;36;96mmm[0m  
 [0;1;33;93m#[0m   [0;1;36;96m"[0;1;34;94m#[0m  [0;1;35;95mm[0;1;31;91mmm[0m    [0;1;36;96mm[0m [0;1;34;94mmm[0m  [0;1;31;91mmm[0;1;33;93m#m[0;1;32;92mm[0m   [0;1;34;94mmm[0;1;35;95mm[0m    [0;1;33;93mm[0;1;32;92mmm[0m   [0;1;34;94mm[0;1;35;95mm#[0;1;31;91mmm[0m         [0;1;35;95mm[0;1;31;91m"[0m   [0;1;32;92m"[0m   [0;1;34;94m##[0m  
 [0;1;32;92m#[0;1;36;96mmm[0;1;34;94mm#[0;1;35;95m"[0m [0;1;31;91m#"[0m  [0;1;32;92m#[0m   [0;1;34;94m#"[0m  [0;1;31;91m"[0m   [0;1;32;92m#[0m    [0;1;34;94m#[0;1;35;95m"[0m  [0;1;31;91m#[0m  [0;1;32;92m#"[0m  [0;1;34;94m"[0m    [0;1;31;91m#[0m           [0;1;31;91m#[0m       [0;1;34;94m#[0m  [0;1;31;91m#[0m 
 [0;1;36;96m#[0m      [0;1;33;93m#"[0;1;32;92m""[0;1;36;96m"[0m   [0;1;35;95m#[0m       [0;1;36;96m#[0m    [0;1;35;95m#[0;1;31;91m""[0;1;33;93m""[0m  [0;1;36;96m#[0m        [0;1;33;93m#[0m     [0;1;34;94m"[0;1;35;95m""[0m   [0;1;33;93m#[0m       [0;1;35;95m#[0;1;31;91mmm[0;1;33;93m#[0m 
 [0;1;34;94m#[0m      [0;1;32;92m"#[0;1;36;96mmm[0;1;34;94m"[0m   [0;1;31;91m#[0m       [0;1;34;94m#[0m    [0;1;31;91m"[0;1;33;93m#m[0;1;32;92mm"[0m  [0;1;34;94m"#[0;1;35;95mmm[0;1;31;91m"[0m    [0;1;32;92m"[0;1;36;96mmm[0m          [0;1;36;96m"m[0;1;34;94mmm[0;1;35;95m"[0m [0;1;31;91m#[0m    [0;1;32;92m#[0m

EOF

for arg in $*; do
	case $1 in
		--license)
			license
			exit 255
		;;
		--help)
			help_context
			exit 255
		;;
		--version)
			check_version="$2"
			shift
			
			if [ "$check_version" = "" ]; then
				version
			else
				version $check_version
			fi
		;;
		--setup)
			PCA_OPMODE="setup"
		;;
		--force)
			PCA_FORCE="yes"
		;;
		--update)
			PCA_OPMODE="update"
		;;
		--install)
			PCA_OPMODE="install"
		;;
		--days)
			PCA_DAYS="$2"
			shift
		;;
		--subject)
			PCA_SUBJECT="$2"
			shift
		;;
		--nodes)
			PCA_NODES="1"
		;;
		--skip-pkcs12)
			PCA_SKIP="1"
		;;
		--select-ca)
			PCA_SELECTED_CA="$2"
			shift
		;;
		--update-crl)
		 	PCA_OPMODE="update-crl"
		;;
		--create-certificate)
			PCA_OPMODE="create-certificate"
		;;
		--create-request)
			PCA_OPMODE="create-request"
		;;
		--sign-request)
			PCA_OPMODE="sign-request"
		;;
		--pkcs12)
			PCA_OPMODE="pkcs12"
		;;
		--revoke)
			PCA_OPMODE="revoke"
		;;
		--renew-ca)
			PCA_OPMODE="renew-ca"
		;;
		--crl-reason)
			PCA_CRL_REASON="$2"
			shift
		;;
		--name)
			PCA_NAME="$2"
			shift
		;;
		--filename)
			PCA_FILENAME="$2"
			shift
		;;
		--root-ca)
			PCA_USE_CONFIG="root_ca"
		;;
		--master-ca)
			PCA_USE_CONFIG="master_ca"
		;;
		--signing-ca)
			PCA_USE_CONFIG="signing_ca"
		;;
		--intermediate-ca)
			PCA_USE_CONFIG="intermediate_ca"
		;;
		--identity)
			PCA_USE_CONFIG="identity"
		;;
		--server)
			PCA_USE_CONFIG="server"
		;;
		--client)
			PCA_USE_CONFIG="client"
		;;
		--timestamp)
			PCA_USE_CONFIG="timestamp"
		;;
		--encryption)
			PCA_USE_CONFIG="encryption"
		;;
		--ocspsign)
			PCA_USE_CONFIG="ocspsign"
		;;
		--encrypt-private)
		 	PCA_OPMODE="encrypt-private"
		;;
		--decrypt-private)
		 	PCA_OPMODE="decrypt-private"
		;;
		--rc)
			[ -f "$2" ] && . $2
			shift
		;;
		--base-path)
			PCA_BASE_PATH="$2"
			shift
		;;
		--base-name)
			PCA_BASE_NAME="$2"
			shift
		;;
		--base-ocsp-url)
			PCA_BASE_OCSP_URL="$2"
			shift
		;;
		--base-pki-url)
			PCA_BASE_PKI_URL="$2"
			shift
		;;
		--base-trustlist-url)
			PCA_BASE_TRUSTLIST_URL="$2"
			shift
		;;
		--dn-countryname)
			PCA_DN_COUNTRYNAME="$2"
			shift
		;;
		--dn-stateorprovincename)
			PCA_DN_STATEORPROVINCENAME="$2"
			shift
		;;
		--dn-localityname)
			PCA_DN_LOCALITYNAME="$2"
			shift
		;;
		--dn-streetaddress)
			PCA_DN_STREETADDRESS="$2"
			shift
		;;
		--dn-postalcode)
			PCA_DN_POSTALCODE="$2"
			shift
		;;
		--dn-owner)
			PCA_DN_OWNER="$2"
			shift
		;;
		--dn-organizationname)
			PCA_DN_ORGANIZATIONNAME="$2"
			shift
		;;
		--dn-businesscategory)
			PCA_DN_BUSINESSCATEGORY="$2"
			shift
		;;
		--root-ca-bits)
			PCA_ROOTCA_BITS="$2"
			shift
		;;
		--root-ca-md)
			PCA_ROOTCA_MD="$2"
			shift
		;;
		--root-ca-valid-days)
			PCA_ROOTCA_VALID_DAYS="$2"
			shift
		;;
		--root-ca-crl-days)
			PCA_ROOTCA_CRL_DAYS="$2"
			shift
		;;
		--root-ca-org-unit-name)
			PCA_ROOTCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--master-ca-bits)
			PCA_MASTERCA_BITS="$2"
			shift
		;;
		--master-ca-md)
			PCA_MASTERCA_MD="$2"
			shift
		;;
		--master-ca-valid-days)
			PCA_MASTERCA_VALID_DAYS="$2"
			shift
		;;
		--master-ca-crl-days)
			PCA_MASTERCA_CRL_DAYS="$2"
			shift
		;;
		--master-ca-org-unit-name)
			PCA_MASTERCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--component-ca-bits)
			PCA_COMPONENTCA_BITS="$2"
			shift
		;;
		--component-ca-md)
			PCA_COMPONENTCA_MD="$2"
			shift
		;;
		--component-ca-valid-days)
			PCA_COMPONENTCA_VALID_DAYS="$2"
			shift
		;;
		--component-ca-crl-days)
			PCA_COMPONENTCA_CRL_DAYS="$2"
			shift
		;;
		--component-ca-org-unit-name)
			PCA_COMPONENTCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--network-ca-bits)
			PCA_NETWORKCA_BITS="$2"
			shift
		;;
		--network-ca-md)
			PCA_NETWORKCA_MD="$2"
			shift
		;;
		--network-ca-valid-days)
			PCA_NETWORKCA_VALID_DAYS="$2"
			shift
		;;
		--network-ca-crl-days)
			PCA_NETWORKCA_CRL_DAYS="$2"
			shift
		;;
		--network-ca-org-unit-name)
			PCA_NETWORKCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--identity-ca-bits)
			PCA_IDENTITYCA_BITS="$2"
			shift
		;;
		--identity-ca-md)
			PCA_IDENTITYCA_MD="$2"
			shift
		;;
		--identity-ca-valid-days)
			PCA_IDENTITYCA_VALID_DAYS="$2"
			shift
		;;
		--identity-ca-crl-days)
			PCA_IDENTITYCA_CRL_DAYS="$2"
			shift
		;;
		--identity-ca-org-unit-name)
			PCA_IDENTITYCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--ocspsign-bits)
			PCA_OCSPSIGN_BITS="$2"
			shift
		;;
		--ocspsign-md)
			PCA_OCSPSIGN_MD="$2"
			shift
		;;
		--timestamp-bits)
			PCA_TIMESTAMP_BITS="$2"
			shift
		;;
		--timestamp-md)
			PCA_TIMESTAMP_MD="$2"
			shift
		;;
		--encryption-bits)
			PCA_ENCRYPTION_BITS="$2"
			shift
		;;
		--encryption-md)
			PCA_ENCRYPTION_MD="$2"
			shift
		;;
		--server-bits)
			PCA_SERVER_BITS="$2"
			shift
		;;
		--server-md)
			PCA_SERVER_MD="$2"
			shift
		;;
		--server-san-dns)
			PCA_SERVER_SAN_DNS="$2"
			shift
		;;
		--client-bits)
			PCA_CLIENT_BITS="$2"
			shift
		;;
		--client-md)
			PCA_CLIENT_MD="$2"
			shift
		;;
		--identity-bits)
			PCA_IDENTITY_BITS="$2"
			shift
		;;
		--identity-md)
			PCA_IDENTITY_MD="$2"
			shift
		;;
		--ssl-certs)
			PCA_SSL_CERTS="$2"
			shift
		;;
		--ssl-install)
			PCA_SSL_INSTALL="1"
		;;
	esac
	
	shift
done

cat <<-EOF
 [0;1;34;94mCopyright (c) 2018 [0;1;32;92mOliver Welter[0;1;34;94m <[0;1;36;96moliver@welter.rocks[0;1;34;94m>[0m
 [0;1;34;94mSee [0;1;32;93mhttps://github.com/VerboteneZone/perfect-ca[0;1;34;94m for details.[0m

EOF

[ "$PCA_CMD" = "" ] && cat <<-EOF
 [0;1;34;94mThis program comes with ABSOLUTELY NO WARRANTY, licensed under GPLv3.[0m
 [0;1;34;94mThis is free software, and you are welcome to redistribute it[0m
 [0;1;34;94munder certain conditions; type '[0;1;31;91m$0 --license[0;1;34;94m' for details.[0m

EOF

# END CLI ARGUMENTS
##########################

##########################
# OPMODE: UPDATE

if [ "$PCA_OPMODE" = "update" -o "$PCA_MODE" = "install" ]; then
	echo -n "[0;1;34;94mChecking for updates...[0m"
	mypwd=`pwd`
	cmd=`which $PCA_PROGNAME`
	[ "$cmd" = "" ] && cmd="$0"
	check1=`md5sum $cmd | awk '{print $1}'`
	tmp=`mktemp -d -q --suffix .pca`
	[ "$tmp" = "" ] && error 5 "mktemp missing"
	cd $tmp &&
	git clone $PCA_GITHUB >/dev/null 2>&1 && \
	echo $OK || echo $FAILED
	check2=`md5sum -b $tmp/perfect-ca/$PCA_PROGNAME | awk '{print $1}'`
	cd $pwd
	if [ "$PCA_OPMODE" = "update" ]; then
		if [ "$check1" = "$check2" ]; then
			rm -rf $tmp >/dev/null 2>&1
			echo "[0;1;32;92mNo update available[0m"
			exit
		else
			check_version=`$tmp/perfect-ca/$PCA_PROGNAME --version $PCA_VERSION >/dev/null 2>&1; echo $?`
			rm -rf $tmp >/dev/null 2>&1
			
			if [ "$check_version" = 2 -o "$check_version" = 4 -o "$check_version" = 6 ]; then
				echo "[0;1;32;91mUpdate available[0m"	
				exit 1
			else
				echo "[0;1;32;93mNo update available, but GIT checksum differs.[0m"
				exit 255
			fi
		fi
	else
		if [ "$check1" = "$check2" ]; then
			rm -rf $tmp >/dev/null 2>&1
			echo "[0;1;32;92mNo installable update available[0m"
			exit 1
		else
			check_version=`$tmp/perfect-ca/$PCA_PROGNAME --version $PCA_VERSION >/dev/null 2>&1; echo $?`

			if [ "$check_version" = 2 -o "$check_version" = 4 -o "$check_version" = 6 ]; then
				echo -n "[0;1;34;94mInstalling update...[0m"
				inst=`cp -f $tmp/perfect-ca/$PCA_PROGNAME $cmd >/dev/null 2>&1 && echo 0 || echo 1`
				[ "$inst" = "0" ] && echo $OK || echo $FAILED
				rm -rf $tmp >/dev/null 2>&1
				exit $inst
			else
				echo "[0;1;32;93mGIT checksum differs, so install manually.[0m"
				exit 254
			fi
		fi	
	fi
	
	exit
fi

# END OPMODE: UPDATE
##########################

##########################
# OPMODE: UPDATE-CRL

if [ "$PCA_OPMODE" = "update-crl" ]; then
	echo "[0;1;34;94mUpdate of $PCA_SELECTED_CA in progress.[0m"
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl 2>/dev/null`
			rm -f $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
			rm -f $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
			$PCA_OPENSSL ca -gencrl \
				-config $PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf \
				-out $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl && \
			$PCA_OPENSSL crl -outform der \
				-in $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl \
				-out $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.crl >/dev/null 2>&1 || error 1 "Update failed"
			hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl 2>/dev/null`
			ln -sf $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
			ln -sf $PCA_SSL_CERTS/PCA_$PCA_SELECTED_CA.crl $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
		;;
		*)
			error 7 "Unknown or invalid CA selected"
		;;
	esac
	
	exit
fi

# END OPMODE: UPDATE-CRL
##########################

##########################
# OPMODE: ENCRYPT-PRIVATE

if [ "$PCA_OPMODE" = "encrypt-private" ]; then
	echo "[0;1;34;94mEncrypting private key of $PCA_SELECTED_CA in progress.[0m"
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			$PCA_OPENSSL rsa -des -in $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key -out $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key
		;;
		*)
			error 7 "Unknown or invalid CA selected"
		;;
	esac
	
	exit
fi

# END OPMODE: ENCRYPT-P...
##########################

##########################
# OPMODE: DECRYPT-PRIVATE

if [ "$PCA_OPMODE" = "decrypt-private" ]; then
	echo "[0;1;34;94mDecrypting private key of $PCA_SELECTED_CA in progress.[0m"
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			$PCA_OPENSSL rsa -in $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key -out $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key
		;;
		*)
			error 7 "Unknown or invalid CA selected"
		;;
	esac
	
	exit
fi

# END OPMODE: DECRYPT-P...
##########################

##########################
# OPMODE: SETUP

if [ "$PCA_OPMODE" = "setup" ]; then
	if [ "$PCA_FORCE" = "" ]; then
		[ -d "$PCA_BASE_PATH/ca/root-ca" ] && error 2 "Root CA path exists"
		[ -d "$PCA_BASE_PATH/ca/master-ca" ] && error 2 "Master CA path exists"
		[ -d "$PCA_BASE_PATH/ca/component-ca" ] && error 2 "Component CA path exists"
		[ -d "$PCA_BASE_PATH/ca/network-ca" ] && error 2 "Network CA path exists"
		[ -d "$PCA_BASE_PATH/ca/identity-ca" ] && error 2 "Identity CA path exists"
	fi
	
	echo -n "[0;1;34;94mSetting up Perfect-CA paths and configs...[0m"
	
	rm -rf $PCA_BASE_PATH/ca/{crl,certs,conf,requests,private} >/dev/null 2>&1
	mkdir -p $PCA_BASE_PATH/ca/{crl,certs,conf,requests,private} >/dev/null 2>&1
	chmod 775 $PCA_BASE_PATH/ca/{crl,certs,requests} >/dev/null 2>&1
	chmod 770 $PCA_BASE_PATH/ca/{conf,private} >/dev/null 2>&1
	
	for pth in root-ca master-ca component-ca network-ca identity-ca; do
		rm -rf $PCA_BASE_PATH/ca/$pth >/dev/null 2>&1
		mkdir -p $PCA_BASE_PATH/ca/$pth/{private,db,certs} >/dev/null 2>&1
		cp /dev/null $PCA_BASE_PATH/ca/$pth/db/$pth.db >/dev/null 2>&1
		cp /dev/null $PCA_BASE_PATH/ca/$pth/db/$pth.db.attr >/dev/null 2>&1
		echo "01" > $PCA_BASE_PATH/ca/$pth/db/$pth.crt.srl
		echo "01" > $PCA_BASE_PATH/ca/$pth/db/$pth.crl.srl
		chmod -R 700 $PCA_BASE_PATH/ca/$pth/private >/dev/null 2>&1
		chmod -R 755 $PCA_BASE_PATH/ca/$pth/certs >/dev/null 2>&1
		chmod -R 775 $PCA_BASE_PATH/ca/$pth/db >/dev/null 2>&1
	done
	
	configuration_write && echo $OK || echo $FAILED
	
	echo -n "[0;1;34;94mSetting up Root-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/root-ca.csr \
		-keyout $PCA_BASE_PATH/ca/root-ca/private/root-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -selfsign -batch \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/root-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/root-ca.crt \
		-extensions root_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/root-ca.xrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/root-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/root-ca.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/root-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/root-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/root-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/root-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	echo $OK || echo $FAILED

	echo -n "[0;1;34;94mSetting up Master-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/master-ca.csr \
		-keyout $PCA_BASE_PATH/ca/master-ca/private/master-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/master-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/master-ca.crt \
		-extensions intermediate_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/master-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/master-ca.crt $PCA_BASE_PATH/ca/certs/root-ca.crt > $PCA_BASE_PATH/ca/certs/master-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/master-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/master-ca.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/master-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/master-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/master-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/master-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/master-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/master-chain.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/master-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/master-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echo $OK || echo $FAILED

	echo -n "[0;1;34;94mSetting up Network-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/network-ca.csr \
		-keyout $PCA_BASE_PATH/ca/network-ca/private/network-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/network-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/network-ca.crt \
		-extensions intermediate_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/network-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/network-ca.crt $PCA_BASE_PATH/ca/certs/master-chain.pem > $PCA_BASE_PATH/ca/certs/network-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/network-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/network-ca.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/network-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/network-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/network-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/network-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/network-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/network-chain.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/network-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/network-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echo $OK || echo $FAILED

	echo -n "[0;1;34;94mSetting up Identity-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/identity-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/identity-ca.csr \
		-keyout $PCA_BASE_PATH/ca/identity-ca/private/identity-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/identity-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/identity-ca.crt \
		-extensions signing_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/identity-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/identity-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/identity-ca.crt $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/identity-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/identity-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/identity-ca.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/identity-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/identity-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/identity-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/identity-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/identity-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/identity-chain.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/identity-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/identity-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echo $OK || echo $FAILED

	echo -n "[0;1;34;94mSetting up Component-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/component-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/component-ca.csr \
		-keyout $PCA_BASE_PATH/ca/component-ca/private/component-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/component-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/component-ca.crt \
		-extensions signing_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/component-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/component-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/component-ca.crt $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/component-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/component-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/component-ca.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/component-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/component-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/component-ca.crt \
		-out $PCA_BASE_PATH/ca/certs/component-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/component-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/component-chain.cer >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/component-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/component-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echo $OK || echo $FAILED
	
	echo -n "[0;1;34;94mExecuting rehash...[0m"
	for pth in root-ca master-ca network-ca component-ca identity-ca; do
		hash=`$PCA_OPENSSL x509 -hash -noout -in $PCA_BASE_PATH/ca/certs/$pth.crt 2>/dev/null`
		ln -sf $PCA_BASE_PATH/ca/certs/$pth.crt $PCA_BASE_PATH/ca/certs/$hash.0 >/dev/null 2>&1
		ln -sf $PCA_BASE_PATH/ca/certs/$pth.crt $PCA_SSL_CERTS/PCA_$pth.pem >/dev/null 2>&1
		ln -sf $PCA_SSL_CERTS/PCA_$pth.pem $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
		hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$pth.xrl 2>/dev/null`
		ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
		ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_SSL_CERTS/PCA_$pth.crl >/dev/null 2>&1
		ln -sf $PCA_SSL_CERTS/PCA_$pth.crl $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
	done
	echo $OK
			
	echo -e "\n[0;1;34;94mPerfect-CA has been setup.[0m"
	echo -e "[0;1;34;94mYou can now backup your Root-CA key[0m"
	echo -e "[0;1;34;94mfrom $PCA_BASE_PATH/ca/root-ca/private/root-ca.key[0m"
	echo -e "[0;1;34;94mand safely delete it (eg, with shred),[0m"
	echo -e "[0;1;34;94mas this is your offline root CA's key.[0m"
	
	exit
fi
                                                                      
# END OPMODE: SETUP
##########################

##########################
# OPMODE: CREATE-REQUEST

if [ "$PCA_OPMODE" = "create-request" -o "$PCA_OPMODE" = "create-certificate" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
	
	config=""
	opts=""
	
	[ "$PCA_SUBJECT" = "" ] || opts="-subj '$PCA_SUBJECT'"
	[ "$PCA_NODES" = "" ] || opts="-nodes $opts"
	
	case $PCA_USE_CONFIG in
		identity|server|client|timestamp|encryption|ocspsign)
			config="$PCA_BASE_PATH/ca/conf/$PCA_USE_CONFIG.conf"
		;;
		*)
			error 8 "Invalid configuration type requested"
		;;
	esac
	
	/bin/bash -c "$PCA_OPENSSL req -new \
		-config $config $opts \
		-out $PCA_BASE_PATH/ca/requests/$PCA_FILENAME.csr \
		-keyout $PCA_BASE_PATH/ca/private/$PCA_FILENAME.key" || error 7 "Create CSR failed"
				
	[ "$PCA_OPMODE" = "create-certificate" ] || exit
fi

# END OPMODE: CREATE-REQ..
##########################

##########################
# OPMODE: SIGN-REQUEST

if [ "$PCA_OPMODE" = "sign-request" -o "$PCA_OPMODE" = "create-certificate" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
	
	config=""
	ext=""
	days=""
	opts="" 
	
	case $PCA_USE_CONFIG in
		server|client|timestamp|ocspsign)
			config="$PCA_BASE_PATH/ca/conf/component-ca.conf"
			ext="${PCA_USE_CONFIG}_ext"
			days="$PCA_COMPONENTCA_VALID_DAYS"
		;;
		identity|encryption)
			config="$PCA_BASE_PATH/ca/conf/identity-ca.conf"
			ext="${PCA_USE_CONFIG}_ext"
			days="$PCA_IDENTITYCA_VALID_DAYS"
		;;
		signing_ca)
			config="$PCA_BASE_PATH/ca/conf/network-ca.conf"
			ext="${PCA_USE_CONFIG}_ext"
			days="$PCA_NETWORKCA_VALID_DAYS"
		;;
		intermediate_ca)
			config="$PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf"
			[ -f "$config" ] || error 6 "Unable to find selected CA"
			ext="${PCA_USE_CONFIG}_ext"
			
			case $PCA_SELECTED_CA in
				root_ca)
					days="$PCA_ROOTCA_VALID_DAYS"
				;;
				master_ca)
					days="$PCA_MASTERCA_VALID_DAYS"
				;;
				network_ca)
					days="$PCA_NETWORKCA_VALID_DAYS"
				;;
				*)
					error 7 "Invalid CA selected"
				;;
			esac
		;;
		master_ca|root_ca)
			config="$PCA_BASE_PATH/ca/conf/$PCA_USE_CONFIG.conf"
			ext="${PCA_USE_CONFIG}_ext"
			[ "$PCA_USE_CONFIG" = "root_ca" ] && days="$PCA_ROOTCA_VALID_DAYS" || days="$PCA_MASTERCA_VALID_DAYS"
		;;
		*)
			error 8 "Invalid configuration type requested"
		;;
	esac
	
	[ "$PCA_DAYS" = "" ] || days="$PCA_DAYS"
	[ "$PCA_OPMODE" = "create-certificate" ] && opts="-batch $opts"
	
	/bin/bash -c "$PCA_OPENSSL ca \
		-config $config $opts \
		-in $PCA_BASE_PATH/ca/requests/$PCA_FILENAME.csr \
		-out $PCA_BASE_PATH/ca/certs/$PCA_FILENAME.crt \
		-extensions $ext -days $days" || error 7 "Unable to sign request"
		
	[ "$PCA_OPMODE" = "create-certificate" ] || exit
fi

# END OPMODE: SIGN-REQ....
##########################

##########################
# OPMODE: PKCS12

if [ "$PCA_OPMODE" = "pkcs12" -o "$PCA_OPMODE" = "create-certificate" ]; then
	[ "$PCA_OPMODE" = "create-certificate" -a "$PCA_SKIP" = "1" ] && exit
	
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
	
	chain=""
	opts=""
	
	case $PCA_USE_CONFIG in
		server|client|timestamp|ocspsign)
			chain="component-chain.pem"
			opts="-caname '$PCA_COMPONENTCA_ORG_UNIT_NAME' -caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		identity|encryption)
			chain="identity-chain.pem"
			opts="-caname '$PCA_IDENTITYCA_ORG_UNIT_NAME' -caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		signing_ca)
			chain="network-chain.pem"
			opts="-caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		intermediate_ca)			
			case $PCA_SELECTED_CA in
				root_ca)
					chain="root-ca.pem"
					opts="-caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
				;;
				master_ca)
					chain="master-chain.pem"
					opts="-caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
				;;
				network_ca)
					chain="network-chain.pem"
					opts="-caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
				;;
				*)
					error 7 "Invalid CA selected"
				;;
			esac
		;;
		master_ca)
			chain="master-chain.pem"
			opts="-caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		root_ca)
			chain="root-ca.pem"
			opts="-caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		*)
			error 8 "Invalid configuration type requested"
		;;
	esac
	
	[ "$PCA_NAME" = "" ] || opts="-name '$PCA_NAME' $opts"
	[ "$PCA_NODES" = "" ] || opts="-nodes $opts"
	
	/bin/bash -c "$PCA_OPENSSL pkcs12 -export $opts \
		-inkey $PCA_BASE_PATH/ca/private/$PCA_FILENAME.key \
		-in $PCA_BASE_PATH/ca/certs/$PCA_FILENAME.crt \
		-certfile $PCA_BASE_PATH/ca/certs/$chain \
		-out $PCA_FILENAME.p12"
	exit
fi

# END OPMODE: PKCS12
##########################

##########################
# OPMODE: REVOKE

if [ "$PCA_OPMODE" = "revoke" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
			
	$PCA_OPENSSL ca \
		-config $PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf \
		-revoke $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/certs/$PCA_FILENAME.pem \
		-crl_reason $PCA_CRL_REASON
	exit
fi

# END OPMODE: REVOKE
##########################

##########################
# OPMODE: RENEW-CA

if [ "$PCA_OPMODE" = "renew-ca" ]; then
	dateNow=`date +%s`
	
	renewRootCA=""
	renewMasterCA=""
	renewNetworkCA=""
	renewComponentCA=""
	renewIdentityCA=""

	updateMasterCA=""
	updateNetworkCA=""
	updateComponentCA=""
	updateIdentityCA=""
	
	rehash=""

	if [ "$PCA_FORCE" = "" ]; then
		for pth in root-ca master-ca network-ca component-ca identity-ca; do
			echo -n "[0;1;34;94mChecking validity of $pth...[0m"
		
			dateCert=`openssl x509 -in $PCA_BASE_PATH/ca/certs/$pth.crt -noout -dates | grep notAfter | cut -d = -f2`
			dateCertTS=`date -d "${dateCert}" +%s`
			certValid=$(($dateCertTS > $dateNow))
			
			if [ "$certValid" = "1" ]; then
				echo $OK
			else
				echo $FAILED
				
				case $pth in
					root-ca)
						renewRootCA="1"
						updateMasterCA="1"
						updateNetworkCA="1"
						updateComponentCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
					master-ca)
						renewMasterCA="1"
						updateMasterCA="1"
						updateNetworkCA="1"
						updateComponentCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
					network-ca)
						renewNetworkCA="1"
						updateNetworkCA="1"
						updateComponentCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
					component-ca)
						renewComponentCA="1"
						updateComponentCA="1"
						rehash="1"
					;;
					identity-ca)
						renewIdentityCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
				esac
			fi
		done
	else
		renewRootCA="1"
		renewMasterCA="1"
		renewNetworkCA="1"
		renewComponentCA="1"
		renewIdentityCA="1"
	
		updateMasterCA="1"
		updateNetworkCA="1"
		updateComponentCA="1"
		updateIdentityCA="1"
		
		rehash="1"	
	fi
		
	if [ "$renewRootCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Root-CA...[0m"
		$PCA_OPENSSL ca -selfsign -batch \
			-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/root-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/root-ca.crt \
			-extensions root_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/root-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/root-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/root-ca.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/root-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/root-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/root-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/root-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED
	fi
	
	if [ "$renewMasterCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Master-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/master-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/master-ca.crt \
			-extensions intermediate_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/master-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/master-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/master-ca.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/master-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/master-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/master-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/master-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED	
	fi
				
	if [ "$renewNetworkCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Network-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/network-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/network-ca.crt \
			-extensions intermediate_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/network-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/network-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/network-ca.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/network-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/network-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/network-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/network-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED
	fi

	if [ "$renewIdentityCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Identity-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/identity-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/identity-ca.crt \
			-extensions signing_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/identity-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/identity-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/identity-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/identity-ca.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/identity-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/identity-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/identity-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/identity-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED
	fi

	if [ "$renewComponentCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Component-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/component-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/component-ca.crt \
			-extensions signing_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/component-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/component-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/component-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/component-ca.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/component-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/component-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/component-ca.crt \
			-out $PCA_BASE_PATH/ca/certs/component-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED
	fi
	
	if [ "$updateMasterCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Master-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/master-ca.crt $PCA_BASE_PATH/ca/certs/root-ca.crt > $PCA_BASE_PATH/ca/certs/master-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/master-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/master-chain.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/master-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/master-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED	
	fi
	
	if [ "$updateNetworkCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Network-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/network-ca.crt $PCA_BASE_PATH/ca/certs/master-chain.pem > $PCA_BASE_PATH/ca/certs/network-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/network-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/network-chain.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/network-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/network-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED	
	fi

	if [ "$updateIdentityCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Identity-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/identity-ca.crt $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/identity-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/identity-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/identity-chain.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/identity-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/identity-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED	
	fi
	
	if [ "$updateComponentCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Component-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/component-ca.crt $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/component-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/component-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/component-chain.cer >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/component-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/component-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echo $OK || echo $FAILED	
	fi

	if [ "$rehash" = "1" ]; then
		echo -n "[0;1;34;94mExecuting rehash...[0m"
		find $PCA_BASE_PATH/ca/certs -type l -name "*.0" -exec unlink {} \;
		find $PCA_BASE_PATH/ca/crl -type l -name "*.0" -exec unlink {} \;
		for pth in root-ca master-ca network-ca component-ca identity-ca; do
			hash=`$PCA_OPENSSL x509 -hash -noout -in $PCA_BASE_PATH/ca/certs/$pth.crt 2>/dev/null`
			ln -sf $PCA_BASE_PATH/ca/certs/$pth.crt $PCA_BASE_PATH/ca/certs/$hash.0 >/dev/null 2>&1
			ln -sf $PCA_BASE_PATH/ca/certs/$pth.crt $PCA_SSL_CERTS/PCA_$pth.pem >/dev/null 2>&1
			ln -sf $PCA_SSL_CERTS/PCA_$pth.pem $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
			hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$pth.xrl 2>/dev/null`
			ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
			ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_SSL_CERTS/PCA_$pth.crl >/dev/null 2>&1
			ln -sf $PCA_SSL_CERTS/PCA_$pth.crl $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
		done
		echo $OK
	fi
			
	exit
fi

# END OPMODE: RENEW-CA
##########################

##########################
# OPMODE: ---

if [ "$PCA_OPMODE" = "" -a "$PCA_CMD" != "" ]; then
	error 254 "Invalid operation mode specified. See '$0 --help' for details"
fi
